{"version":3,"sources":["formatter.js","App.js","serviceWorker.js","index.js"],"names":["formatter","compactWhiteSpace","value","str","replace","parseQuery","indentStr","maxLength","i","depth","result","part","length","charAt","trim","match","this","nextLine","endsWith","parts","splitValue","indent","j","repeat","lastIndexOf","canSplit","inQuotes","push","char","indexOf","Formatter","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","text","formattedQuery","minQuery","handleQueryChange","bind","assertThisInitialized","updateQuery","updateIndent","updateMaxFieldLength","event","target","query","setState","_ref","_ref2","_this2","react_default","a","createElement","Grid","columns","style","height","Row","Column","textAlign","width","Header","size","content","TextArea","minHeight","resize","onChange","stretched","verticalAlign","Segment","Form","onSubmit","Field","Radio","label","name","checked","Divider","Input","type","Button","icon","onClick","Component","App","Menu","Item","header","App_Formatter","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea6a8d72.chunk.js","sourcesContent":["const formatter = ({\r\n    compactWhiteSpace(value) {\r\n        //compress spaces not in quotes\r\n        var str = value.replace(/\\s+(?=((\\\\[\\\\\"]|[^\\\\\"])*\"(\\\\[\\\\\"]|[^\\\\\"])*\")*(\\\\[\\\\\"]|[^\\\\\"])*$)/gm, ' ');\r\n        //remove extra spaces between (\r\n        str = str.replace(/\\(\\s+\\(/gm, '((');\r\n        //remove extra spaces between )\r\n        str = str.replace(/\\)\\s+\\)/gm, '))');\r\n        return str;\r\n    },\r\n    parseQuery(str, indentStr, maxLength) {\r\n        var i = 0;\r\n        var depth = 0;\r\n        var result = '';\r\n        var part = '';\r\n        while (i < str.length) {\r\n            if (str.charAt(i) === '(') {\r\n                part = part.trim();\r\n                //if the last character was '(' ignoring whitespace, the part being printed has content,  this not the first open bracket in a block and the last character printed was not a \":\"\r\n                if (result.match(/\\([\\s]*$/gm) && part.length > 0 && depth > 0 && !part.match(/:$/)) {\r\n                    result += this.nextLine(depth, indentStr);\r\n                }\r\n                result += part.trim();\r\n                //if part does not contain + or - or :\r\n                if (!part.match(/[+-:]/gm)) {\r\n                    result += this.nextLine(depth, indentStr);\r\n                }\r\n                depth++;\r\n                part = '';\r\n                result += str.charAt(i);\r\n\r\n            } else if (str.charAt(i) === ')') {\r\n                if (result.endsWith(\":(\") && part.length > maxLength) {\r\n                    var parts = this.splitValue(part, maxLength);\r\n                    var indent = result.match(/[^\\s]*$/g)[0].length;\r\n                    result += parts[0].trim();\r\n                    if (parts.length > 1) {\r\n                        for (var j = 1; j < parts.length; j++) {\r\n                            result += this.nextLine(depth - 2, indentStr);\r\n                            result += ' '.repeat(indent);\r\n                            result += parts[j].trim();\r\n                        }\r\n                        result += this.nextLine(depth - 1, indentStr);\r\n                    }\r\n                    result += str.charAt(i);\r\n                    depth--;\r\n                    part = '';\r\n                } else {\r\n                    //if the last character printed was ) start a new line indented 1 less than the current depth\r\n                    //Also skip this if the last set to brackets was defining the field value\r\n                    if ((result.charAt(result.length - 1) === ')' && result.charAt(result.lastIndexOf('(') - 1) !== ':') || result.match(/\\)\\)$/g) || result.lastIndexOf('\\n') > result.lastIndexOf('(')) {\r\n                        result += this.nextLine(depth - 1, indentStr);\r\n                    }\r\n                    result += part.trim();\r\n                    depth--;\r\n                    result += str.charAt(i);\r\n                    part = '';\r\n                    //If this the end of one query block add a new line\r\n                    if (depth === 0) {\r\n                        result += '\\n';\r\n                    }\r\n                }\r\n            } else {\r\n                part += str.charAt(i);\r\n            }\r\n            i++;\r\n        }\r\n        result += part;\r\n        return result;\r\n    },\r\n    nextLine(depth, indentStr) {\r\n        var str = '\\n';\r\n        if (depth > 0) str += indentStr.repeat(depth);\r\n        return str;\r\n    },\r\n    splitValue(str, length) {\r\n        var parts = [];\r\n        var i = 0;\r\n        var part = \"\";\r\n        var canSplit = true;\r\n        var inQuotes = false;\r\n        while (i < str.length) {\r\n            if (part.length > length && canSplit && !inQuotes) {\r\n                parts.push(part);\r\n                part = '';\r\n            }\r\n            var char = str.charAt(i);\r\n            part += char;\r\n            i++;\r\n            if (char === '\"') {\r\n                inQuotes = !inQuotes;\r\n            }\r\n            if (\"+- \".indexOf(char) > -1) {\r\n                canSplit = false;\r\n            } else {\r\n                canSplit = true;\r\n            }\r\n        }\r\n        if (part.trim().length !== 0) {\r\n            parts.push(part);\r\n        }\r\n\r\n        return parts;\r\n    }\r\n});\r\n\r\nexport default formatter;","import React, { Component } from 'react';\r\nimport formatter from './formatter.js';\r\nimport { Grid, TextArea, Header, Form, Radio, Button, Divider, Segment, Menu } from 'semantic-ui-react';\r\n\r\nclass Formatter extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { text: '', formattedQuery: '', minQuery: '', indent: 'tabs',maxLength:30};\r\n    this.handleQueryChange = this.handleQueryChange.bind(this);\r\n    this.updateQuery = this.updateQuery.bind(this);\r\n    this.updateIndent = this.updateIndent.bind(this);\r\n    this.updateMaxFieldLength = this.updateMaxFieldLength.bind(this);\r\n  }\r\n  handleQueryChange(event) {\r\n    this.updateQuery(event.target.value);\r\n  }\r\n  updateQuery(query) {\r\n    var str = formatter.compactWhiteSpace(query);\r\n    var indent = '\\t';\r\n    if (this.state.indent === 'spaces') {\r\n      indent = '    ';\r\n    }\r\n    var result = formatter.parseQuery(str, indent,this.state.maxLength);\r\n    this.setState({ text: query, formattedQuery: result, minQuery: str });\r\n  }\r\n\r\n  updateIndent(event, { value }) {\r\n    const state = this.state;\r\n    state.indent = value;\r\n    this.setState(state);\r\n    this.updateQuery(state.text);\r\n  }\r\n  updateMaxFieldLength(event,{value}){\r\n    if(value < 1){\r\n      value = 1;\r\n    }\r\n    const state = this.state;\r\n    state.maxLength = value;\r\n    this.setState(state);\r\n    this.updateQuery(state.text);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid columns={3} style={{ height: '95vh' }}>\r\n        <Grid.Row style={{ height: \"90%\" }}>\r\n          <Grid.Column textAlign='center' width={7}>\r\n            <Header size='medium' content='Query:' />\r\n            <TextArea style={{ width: \"95%\", minHeight: \"100%\", resize: \"none\" }} value={this.state.text} onChange={this.handleQueryChange} />\r\n          </Grid.Column>\r\n          <Grid.Column stretched textAlign='center' verticalAlign='middle' width={2} height={100}>\r\n            <Grid.Row>\r\n              <Segment>\r\n                <Form onSubmit={this.updateIndent}>\r\n                  <Form.Field>\r\n                    <Header size='medium' content='Indent Style:' />\r\n                  </Form.Field>\r\n                  <Form.Field>\r\n                    <Radio label='Tabs' name='indentStyle' value='tabs' checked={this.state.indent === 'tabs'} onChange={this.updateIndent} />\r\n                  </Form.Field>\r\n                  <Form.Field>\r\n                    <Radio label='Spaces' name='indentStyle' value='spaces' checked={this.state.indent === 'spaces'} onChange={this.updateIndent} />\r\n                  </Form.Field>\r\n                </Form>\r\n                <Divider />\r\n                <Form>\r\n                  <Header content='Wrap Fields Longer Than:' size='medium'/>\r\n                  <Form.Input type='number' value={this.state.maxLength} onChange={this.updateMaxFieldLength}/>\r\n                </Form>\r\n                <Divider />\r\n                <Button content='Copy' icon='left arrow' onClick={() => { this.updateQuery(this.state.formattedQuery) }} />\r\n\r\n              </Segment>\r\n            </Grid.Row>\r\n          </Grid.Column>\r\n          <Grid.Column textAlign='center' width={7}>\r\n            <Header size='medium'>Formatted:</Header>\r\n            <TextArea style={{ width: \"95%\", minHeight: \"85%\", resize: \"none\" }}\r\n              value={this.state.formattedQuery}\r\n            />\r\n            <Header size='medium' content='Compact:' />\r\n            <TextArea style={{ width: \"95%\", minHeight: \"10%\", resize: \"none\" }}\r\n              value={this.state.minQuery}\r\n            />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Menu>\r\n          <Menu.Item header>\r\n            <Header size='huge' content='Solr Query Formatter' />\r\n          </Menu.Item>\r\n        </Menu>\r\n\r\n        <Formatter />\r\n      </div>);\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}